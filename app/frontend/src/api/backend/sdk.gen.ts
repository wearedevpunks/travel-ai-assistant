// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { AppControllerIndexData, HealthCheckData, TravelPlannerRandomThemeData, TravelPlannerRandomThemeResponse, TravelPlannerChatSendData, TravelPlannerTtsSendData, TravelPlannerSttSendData, TravelPlannerSttSendResponse, TravelPlannerItineraryGetData, TravelPlannerItineraryGetResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const appControllerIndex = <ThrowOnError extends boolean = false>(options?: Options<AppControllerIndexData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Generate a random travel theme
 */
export const travelPlannerRandomTheme = <ThrowOnError extends boolean = false>(options?: Options<TravelPlannerRandomThemeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TravelPlannerRandomThemeResponse, unknown, ThrowOnError>({
        url: '/v1/travel-planner/random-theme',
        ...options
    });
};

/**
 * Chat with AI in streaming mode
 */
export const travelPlannerChatSend = <ThrowOnError extends boolean = false>(options: Options<TravelPlannerChatSendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/v1/travel-planner/chat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Convert text to speech
 */
export const travelPlannerTtsSend = <ThrowOnError extends boolean = false>(options: Options<TravelPlannerTtsSendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/v1/travel-planner/tts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Convert speech to text
 */
export const travelPlannerSttSend = <ThrowOnError extends boolean = false>(options: Options<TravelPlannerSttSendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TravelPlannerSttSendResponse, unknown, ThrowOnError>({
        url: '/v1/travel-planner/stt',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get travel itinerary by ID
 */
export const travelPlannerItineraryGet = <ThrowOnError extends boolean = false>(options: Options<TravelPlannerItineraryGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TravelPlannerItineraryGetResponse, unknown, ThrowOnError>({
        url: '/v1/travel-planner/itinerary/{id}',
        ...options
    });
};